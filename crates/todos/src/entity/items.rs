//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "items")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub due: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub added_at: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub completed_at: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub updated_at: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub section_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub project_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub parent_id: Option<String>,
    pub priority: Option<i32>,
    pub child_order: Option<i32>,
    pub checked: Option<i32>,
    pub is_deleted: Option<i32>,
    pub day_order: Option<i32>,
    pub collapsed: Option<i32>,
    pub pinned: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub labels: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub extra_data: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub item_type: Option<String>,
}

#[derive(Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
