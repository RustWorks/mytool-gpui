//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use async_trait::async_trait;
use chrono::NaiveDateTime;
use sea_orm::{DbErr, Set, entity::prelude::*};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sources")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub source_type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub display_name: Option<String>,
    pub added_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub is_visible: bool,
    pub child_order: Option<i32>,
    pub sync_server: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub last_sync: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub data: Option<String>,
}

#[derive(Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let mut this = self;
        let now = chrono::Utc::now().naive_utc();

        if insert {
            this.id = Set(Uuid::new_v4().to_string());
            this.added_at = Set(now);
        }

        this.updated_at = Set(now);

        Ok(this)
    }
}
