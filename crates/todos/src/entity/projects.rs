//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "projects")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text", nullable)]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub color: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub backend_type: Option<String>,
    pub inbox_project: Option<i32>,
    pub team_inbox: Option<i32>,
    pub child_order: Option<i32>,
    pub is_deleted: Option<i32>,
    pub is_archived: Option<i32>,
    pub is_favorite: Option<i32>,
    pub shared: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub view_style: Option<String>,
    pub sort_order: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub parent_id: Option<String>,
    pub collapsed: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub icon_style: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub emoji: Option<String>,
    pub show_completed: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub due_date: Option<String>,
    pub inbox_section_hidded: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub sync_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub source_id: Option<String>,
}

#[derive(Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
