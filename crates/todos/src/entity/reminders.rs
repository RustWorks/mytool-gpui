//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "reminders")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text", nullable)]
    pub id: String,
    pub notify_uid: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub item_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub service: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub r#type: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub due: Option<String>,
    pub mm_offset: Option<i32>,
    pub is_deleted: Option<i32>,
}

#[derive(Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::items::Entity",
        from = "Column::ItemId",
        to = "super::items::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Items,
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
