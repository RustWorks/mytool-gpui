//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use async_trait::async_trait;
use chrono::NaiveDateTime;
use sea_orm::{DbErr, Set, entity::prelude::*};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sections")]
#[serde(rename_all = "camelCase")]
#[derive(Default)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub archived_at: Option<NaiveDateTime>,
    #[sea_orm(column_type = "Text")]
    pub added_at: NaiveDateTime,
    #[sea_orm(column_type = "Text", nullable)]
    pub project_id: Option<String>,
    pub section_order: Option<i32>,
    pub collapsed: bool,
    pub is_deleted: bool,
    pub is_archived: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub color: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub hidded: bool,
}

#[derive(Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::ProjectId",
        to = "super::projects::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Projects,
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let mut this = self;
        let now = chrono::Utc::now().naive_utc();

        if insert {
            this.id = Set(Uuid::new_v4().to_string());
            this.added_at = Set(now);
        }

        Ok(this)
    }
}
